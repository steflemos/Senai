DROP DATABASE IF EXISTS DBATIVIDADEAVALIATIVA;
CREATE DATABASE DBATIVIDADEAVALIATIVA;

USE DBATIVIDADEAVALIATIVA;

CREATE TABLE USUARIO (
	IDUSUARIO INT NOT NULL AUTO_INCREMENT 
    , NOME VARCHAR(45)
    , EMAIL VARCHAR(45)
    , PRIMARY KEY (IDUSUARIO)
);

INSERT INTO USUARIO(NOME, EMAIL)VALUES('MARIA HELENA', 'MARIA@INTERNET.COM');
INSERT INTO USUARIO(NOME, EMAIL)VALUES('CARLOS ALBERTO', 'CARLOS@INTERNET.COM');
INSERT INTO USUARIO(NOME, EMAIL)VALUES('JOAO DA SILVA', 'JOAO@INTERNET.COM');

CREATE TABLE EPISODIO (
	IDEPISODIO INT NOT NULL AUTO_INCREMENT
    , NOME VARCHAR(45)
    , TEMPORADA INT
    , NUMERO INT 
    , DURACAO TIME
    , PRIMARY KEY (IDEPISODIO)
);

INSERT INTO EPISODIO(NOME, TEMPORADA, NUMERO, DURACAO)VALUES('PILOTO', 1, 1, '00:55:00');
INSERT INTO EPISODIO(NOME, TEMPORADA, NUMERO, DURACAO)VALUES('O ENCONTRO', 1, 2, '00:50:00');
INSERT INTO EPISODIO(NOME, TEMPORADA, NUMERO, DURACAO)VALUES('DESAPARECIDO', 1, 3, '00:47:00');
INSERT INTO EPISODIO(NOME, TEMPORADA, NUMERO, DURACAO)VALUES('INVESTIGADO', 2, 4, '00:58:00');
INSERT INTO EPISODIO(NOME, TEMPORADA, NUMERO, DURACAO)VALUES('REVELACAO', 2, 5, '00:49:00');
INSERT INTO EPISODIO(NOME, TEMPORADA, NUMERO, DURACAO)VALUES('JUSTICA', 2, 6, '00:59:00');
INSERT INTO EPISODIO(NOME, TEMPORADA, NUMERO, DURACAO)VALUES('NEM TUDO ACABOU', 3, 7, '00:59:00');
INSERT INTO EPISODIO(NOME, TEMPORADA, NUMERO, DURACAO)VALUES('O INIMIGO AGORA Ã‰ OUTRO', 3, 8, '00:59:00');


CREATE TABLE ACESSO(
    IDACESSO INT NOT NULL AUTO_INCREMENT
    , IDUSUARIO INT NOT NULL
    , IDEPISODIO INT NOT NULL
    , DATA DATE
    , HORA TIME
    , DURACAO TIME
    , PRIMARY KEY (IDACESSO)
    , FOREIGN KEY (IDEPISODIO) REFERENCES EPISODIO(IDEPISODIO) 
    , FOREIGN KEY (IDUSUARIO) REFERENCES USUARIO(IDUSUARIO) 
);

INSERT INTO ACESSO (IDACESSO, IDUSUARIO, IDEPISODIO, DATA, HORA, DURACAO)VALUES(1, 1, 1, '2016-06-18', '20:00', '00:50');
INSERT INTO ACESSO (IDACESSO, IDUSUARIO, IDEPISODIO, DATA, HORA, DURACAO)VALUES(2, 1, 2, '2016-06-20', '19:30', '00:49');
INSERT INTO ACESSO (IDACESSO, IDUSUARIO, IDEPISODIO, DATA, HORA, DURACAO)VALUES(3, 2, 1, '2016-06-20', '21:00', '00:32');
INSERT INTO ACESSO (IDACESSO, IDUSUARIO, IDEPISODIO, DATA, HORA, DURACAO)VALUES(4, 3, 1, '2016-07-01', '21:45', '00:50');
INSERT INTO ACESSO (IDACESSO, IDUSUARIO, IDEPISODIO, DATA, HORA, DURACAO)VALUES(5, 2, 5, '2016-06-20', '20:09', '00:49');
INSERT INTO ACESSO (IDACESSO, IDUSUARIO, IDEPISODIO, DATA, HORA, DURACAO)VALUES(6, 1, 3, '2016-06-20', '19:23', '00:46');
INSERT INTO ACESSO (IDACESSO, IDUSUARIO, IDEPISODIO, DATA, HORA, DURACAO)VALUES(7, 3, 2, '2016-07-01', '21:41', '00:49');
INSERT INTO ACESSO (IDACESSO, IDUSUARIO, IDEPISODIO, DATA, HORA, DURACAO)VALUES(8, 1, 4, '2016-06-20', '20:25', '00:58');
INSERT INTO ACESSO (IDACESSO, IDUSUARIO, IDEPISODIO, DATA, HORA, DURACAO)VALUES(9, 1, 6, '2016-06-20', '21:30', '00:55');
INSERT INTO ACESSO (IDACESSO, IDUSUARIO, IDEPISODIO, DATA, HORA, DURACAO)VALUES(10, 1, 5, '2016-06-21', '19:02', '00:49');

/*Q 01*/
SELECT 
	USUARIO.IDUSUARIO
    , USUARIO.NOME
    , USUARIO.EMAIL
	, ACESSO.IDACESSO
    , ACESSO.DATA
    , ACESSO.HORA
    , EPISODIO.IDEPISODIO
    , EPISODIO.NUMERO
    , EPISODIO.NOME
    , EPISODIO.TEMPORADA
FROM
	USUARIO
    INNER JOIN ACESSO ON
    ACESSO.IDUSUARIO = USUARIO.IDUSUARIO
    INNER JOIN EPISODIO ON
    EPISODIO.IDEPISODIO = ACESSO.IDEPISODIO
WHERE
	ACESSO.DATA BETWEEN '2016-07-2016' AND '2016-07-31'
ORDER BY 
	EPISODIO.IDEPISODIO;

/*Q 02*/
SELECT 
	USUARIO.IDUSUARIO
    , USUARIO.NOME
    , USUARIO.EMAIL
    , MAX(ACESSO.IDEPISODIO)
FROM
	USUARIO
    LEFT JOIN ACESSO ON
    ACESSO.IDUSUARIO = USUARIO.IDUSUARIO
GROUP BY 
	USUARIO.IDUSUARIO
    , USUARIO.NOME
    , USUARIO.EMAIL
;

/*Q 03 */
SELECT 
    EPISODIO.TEMPORADA
    , SUM(EPISODIO.DURACAO)
FROM
	EPISODIO 
GROUP BY EPISODIO.TEMPORADA;
    
/*Q 04 */
SELECT 
    ACESSO.IDUSUARIO
    , COUNT(DISTINCT ACESSO.IDEPISODIO)
    , MAX(EPISODIO.IDEPISODIO)
FROM
    USUARIO 
    INNER JOIN ACESSO ON
    ACESSO.IDUSUARIO = USUARIO.IDUSUARIO
	INNER JOIN EPISODIO ON
    1 = 1  -- TEM QUE TER OUTRA FORMA  
GROUP BY
    ACESSO.IDUSUARIO
HAVING 
	COUNT(DISTINCT ACESSO.IDEPISODIO) = MAX(EPISODIO.IDEPISODIO);
    
/*Q 05 */
SELECT 
    EPISODIO.TEMPORADA
    , COUNT(EPISODIO.IDEPISODIO)
    , COUNT(ACESSO.IDACESSO)
    , COUNT(ACESSO.IDUSUARIO)
FROM
	EPISODIO 
    INNER JOIN ACESSO ON
    ACESSO.IDEPISODIO = EPISODIO.IDEPISODIO
GROUP BY EPISODIO.TEMPORADA;


